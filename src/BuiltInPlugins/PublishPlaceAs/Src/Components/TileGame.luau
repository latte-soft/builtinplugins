local l_Parent_0 = script.Parent.Parent.Parent;
local v1 = require(l_Parent_0.Packages.Roact);
local v2 = require(l_Parent_0.Packages.Framework);
local l_Separator_0 = v2.UI.Separator;
local l_ContextServices_0 = v2.ContextServices;
local l_withContext_0 = l_ContextServices_0.withContext;
local l_ContentProvider_0 = game:GetService("ContentProvider");
local v7 = v1.PureComponent:extend("TileGame");
v7.init = function(v8)
    v8.state = {
        assetFetchStatus = nil
    };
    v8.isMounted = false;
end;
v7.didMount = function(v9)
    v9.isMounted = true;
    spawn(function()
        l_ContentProvider_0:PreloadAsync({
            v9.thumbnailUrl
        }, function(_, v11)
            if v9.isMounted then
                v9:setState({
                    assetFetchStatus = v11
                });
            end;
        end);
    end);
end;
v7.willUnmount = function(v12)
    v12.isMounted = false;
end;
v7.render = function(v13)
    local l_props_0 = v13.props;
    local l_Stylizer_0 = l_props_0.Stylizer;
    local l_Localization_0 = l_props_0.Localization;
    local l_Name_0 = l_props_0.Name;
    local l_MinimumAge_0 = l_props_0.MinimumAge;
    local v19 = l_props_0.LayoutOrder or 0;
    local l_PrivacyType_0 = l_props_0.PrivacyType;
    local l_OnActivated_0 = l_props_0.OnActivated;
    v13.thumbnailUrl = string.format("rbxthumb://type=AutoGeneratedAsset&id=%i&w=%i&h=%i", l_props_0.Id, 150, 150);
    local v22 = v13.state.assetFetchStatus == Enum.AssetFetchStatus.Success;
    local l_SCREEN_CHOOSE_GAME_0 = l_Stylizer_0.SCREEN_CHOOSE_GAME;
    local v24 = nil;
    local v25 = nil;
    local _ = nil;
    v24 = l_SCREEN_CHOOSE_GAME_0.ICON_SIZE;
    v25 = v24 + l_SCREEN_CHOOSE_GAME_0.NAME_SIZE;
    return v1.createElement("ImageButton", {
        BackgroundTransparency = 1, 
        LayoutOrder = v19, 
        BorderSizePixel = 0, 
        [v1.Event.Activated] = l_OnActivated_0
    }, {
        Icon = v1.createElement("ImageLabel", {
            Position = UDim2.new(0, 0, 0, 0), 
            Size = UDim2.new(1, 0, 0, l_SCREEN_CHOOSE_GAME_0.ICON_SIZE), 
            Image = not not v22 and v13.thumbnailUrl or l_Stylizer_0.icons.thumbnailPlaceHolder, 
            ImageColor3 = not not v22 and Color3.new(1, 1, 1) or l_Stylizer_0.icons.imageColor, 
            BackgroundColor3 = l_Stylizer_0.icons.backgroundColor, 
            BorderSizePixel = 0
        }), 
        Name = v1.createElement("TextLabel", {
            Text = l_Name_0, 
            Position = UDim2.fromOffset(0, v24), 
            Size = UDim2.new(1, 0, 0, l_SCREEN_CHOOSE_GAME_0.NAME_SIZE), 
            TextWrapped = true, 
            TextTruncate = Enum.TextTruncate.AtEnd, 
            TextXAlignment = Enum.TextXAlignment.Left, 
            TextYAlignment = Enum.TextYAlignment.Top, 
            TextSize = 18, 
            Font = l_Stylizer_0.font, 
            TextColor3 = l_Stylizer_0.textColor, 
            BackgroundTransparency = 1
        }, {
            Padding = v1.createElement("UIPadding", {
                PaddingTop = UDim.new(0, l_SCREEN_CHOOSE_GAME_0.NAME_PADDING), 
                PaddingBottom = UDim.new(0, l_SCREEN_CHOOSE_GAME_0.NAME_PADDING), 
                PaddingLeft = UDim.new(0, l_SCREEN_CHOOSE_GAME_0.NAME_PADDING), 
                PaddingRight = UDim.new(0, l_SCREEN_CHOOSE_GAME_0.NAME_PADDING)
            })
        }), 
        Separator = v1.createElement(l_Separator_0, {
            Position = UDim2.new(0.5, 0, 0, v25)
        }), 
        Footer = v1.createElement("Frame", {
            Size = UDim2.new(1, 0, 0, l_SCREEN_CHOOSE_GAME_0.TILE_HEIGHT - v25), 
            Position = UDim2.fromOffset(0, v25), 
            BackgroundTransparency = 1
        }, {
            Padding = v1.createElement("UIPadding", {
                PaddingLeft = UDim.new(0, l_SCREEN_CHOOSE_GAME_0.FOOTER_SIDE_PADDING), 
                PaddingRight = UDim.new(0, l_SCREEN_CHOOSE_GAME_0.FOOTER_SIDE_PADDING)
            }), 
            PrivacyLabel = v1.createElement("TextLabel", {
                Text = l_Localization_0:getText("PrivacyType", l_PrivacyType_0), 
                AnchorPoint = Vector2.new(0, 0.5), 
                Position = UDim2.fromScale(0, 0.5), 
                Size = UDim2.fromScale(1, 1), 
                TextWrapped = true, 
                TextXAlignment = Enum.TextXAlignment.Left, 
                TextSize = 14, 
                Font = l_Stylizer_0.font, 
                TextColor3 = l_PrivacyType_0 == "Public" and l_Stylizer_0.successText.text or l_Stylizer_0.dimmerTextColor, 
                BackgroundTransparency = 1
            }), 
            AgeGuidelinesLabel = if not not l_MinimumAge_0 and l_MinimumAge_0 >= 17 then v1.createElement("TextLabel", {
                Text = l_MinimumAge_0 .. "+", 
                AnchorPoint = Vector2.new(1, 0.5), 
                Position = UDim2.fromScale(1, 0.5), 
                Size = UDim2.fromOffset(0, 20), 
                AutomaticSize = Enum.AutomaticSize.X, 
                TextSize = 12, 
                Font = l_Stylizer_0.font, 
                TextColor3 = l_Stylizer_0.textColor, 
                BackgroundColor3 = l_Stylizer_0.foregroundColorContrast
            }, {
                Padding = v1.createElement("UIPadding", {
                    PaddingLeft = UDim.new(0, l_SCREEN_CHOOSE_GAME_0.GUIDELINE_LABEL_PADDING), 
                    PaddingRight = UDim.new(0, l_SCREEN_CHOOSE_GAME_0.GUIDELINE_LABEL_PADDING)
                }), 
                Corners = v1.createElement("UICorner", {
                    CornerRadius = UDim.new(0, 4)
                })
            }) else nil
        })
    });
end;
return (l_withContext_0({
    Stylizer = l_ContextServices_0.Stylizer, 
    Localization = l_ContextServices_0.Localization
})(v7));
